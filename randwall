#!/usr/bin/env python3
import random
import math
import scipy.spatial

CELL_SIZE = random.randrange(50, 250, 25)
WIDTH = 1920.0
HEIGHT = 1080.0
VARIANCE = 0.75


cells_x = int((WIDTH + 4 * CELL_SIZE) / CELL_SIZE)
cells_y = int((HEIGHT + 4 * CELL_SIZE) / CELL_SIZE)

bleed_x = ((cells_x * CELL_SIZE) - WIDTH) / 2.0
bleed_y = ((cells_y * CELL_SIZE) - HEIGHT) / 2.0

variance = CELL_SIZE * VARIANCE / 2.0

color1 = random.randrange(0, 180)
color2 = random.randrange(0, 180)


def centro(polygon):
    return [sum(coords)/len(coords) for coords in polygon.T]

def gradient(coord):
    x,y = map(int, coord)
    w = (WIDTH + (bleed_x * 2)) / 2.0
    h = (HEIGHT + (bleed_y * 2)) / 2.0
    r = math.hypot(abs(w - x) , abs(h - y))
    r_max = math.hypot( (WIDTH + (bleed_x * 2)), (HEIGHT + (bleed_y * 2)) ) / 2
    c = r/r_max * 255
    if(c > 255):
        c = 255
    return '#%02x%02x%02x' % (int(c),int(color1),int(color2))

def generate_points():
    w = WIDTH + bleed_x
    h = HEIGHT + bleed_y
    half_cell_size = CELL_SIZE / 2.0
    double_v = variance * 2.0
    negative_v = -variance

    points = [];

    for i in range(int(-bleed_x), int(w), int(CELL_SIZE)):
        for j in range (int(-bleed_y), int(h), int(CELL_SIZE)):
            x = (i + half_cell_size) + (random.random() * double_v + negative_v);
            y = (j + half_cell_size) + (random.random() * double_v + negative_v);
            points.append([int(x), int(y)]);
    return points

def delaunay_polygons(points):
    delaunay_diagram=scipy.spatial.Delaunay(points)
    tris=delaunay_raw.points[delaunay_raw.simplices]
    polygons=[numpy.array(tri) for triang in tris]
    return polygons




def voronoi_polygons(points):
    polygons = []
    voronoi_diagram = scipy.spatial.Voronoi(points)
    for region in voronoi_diagram.regions:
        if len(region)>0 and not region.__contains__(-1):
            polygons.append(voronoi_diagram.vertices[region])
    return polygons


def make_svg(polygons):
    print('<svg xmlns="http://www.w3.org/2000/svg" width="%s" height="%s">' % (int(WIDTH), int(HEIGHT)))
    for polygon in polygons:
        color = gradient(centro(polygon))
        path = 'L'.join([','.join([str(y) for y in vertice]) for vertice in polygon])
        print('<path d="M%sZ" fill="%s" stroke="%s" stroke-width="1.51"/>' % (path, color, "#ffffff"))
    print('</svg>')

points=generate_points()
polygons=voronoi_polygons(points)
make_svg(polygons)
